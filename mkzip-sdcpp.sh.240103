#!/bin/sh

# zip ggml stable-diffusion.cpp files
# exclude:
# ggml/models/gpt-2-117M/ggml-model.bin and others in MODELS
#zip -rv ggml-230218.zip ggml

MYNAME="mkzip-sdcpp.sh"

# common code, functions
### return code/error code
RET_TRUE=1		# TRUE
RET_FALSE=0		# FALSE
RET_OK=0		# OK
RET_NG=1		# NG
RET_YES=1		# YES
RET_NO=0		# NO
RET_CANCEL=2		# CANCEL

ERR_USAGE=1		# usage
ERR_UNKNOWN=2		# unknown error
ERR_NOARG=3		# no argument
ERR_BADARG=4		# bad argument
ERR_NOTEXISTED=10	# not existed
ERR_EXISTED=11		# already existed
ERR_NOTFILE=12		# not file
ERR_NOTDIR=13		# not dir
ERR_CANTCREATE=14	# can't create
ERR_CANTOPEN=15		# can't open
ERR_CANTCOPY=16		# can't copy
ERR_CANTDEL=17		# can't delete
ERR_BADSETTINGS=18	# bad settings
ERR_BADENVIRONMENT=19	# bad environment
ERR_BADENV=19		# bad environment, short name

###
# https://qiita.com/ko1nksm/items/095bdb8f0eca6d327233
ESC=$(printf '\033')
ESCBLACK="${ESC}[30m"
ESCRED="${ESC}[31m"
ESCGREEN="${ESC}[32m"
ESCYELLOW="${ESC}[33m"
ESCBLUE="${ESC}[34m"
ESCMAGENTA="${ESC}[35m"
ESCCYAN="${ESC}[36m"
ESCWHITEL="${ESC}[37m"
ESCDEFAULT="${ESC}[38m"
ESCBACK="${ESC}[m"
ESCRESET="${ESC}[0m"

ESCOK="$ESCGREEN"
ESCERR="$ESCRED"
ESCWARN="$ESCMAGENTA"
ESCINFO="$ESCWHITE"

### flags
VERBOSE=0		# -v --verbose flag, -v -v means more verbose
NOEXEC=$RET_FALSE	# -n --noexec flag
FORCE=$RET_FALSE	# -f --force flag
NODIE=$RET_FALSE	# -nd --nodie
NOCOPY=$RET_FALSE	# -ncp --nocopy
NOTHING=

###
# func:xxmsg ver:2023.12.23
# more verbose message to stderr
# xxmsg "messages"
xxmsg()
{
	if [ $VERBOSE -ge 2 ]; then
		echo "$MYNAME: $*" 1>&2
	fi
}

# func:xmsg ver:2023.12.23
# verbose message to stderr
# xmsg "messages"
xmsg()
{
	if [ $VERBOSE -ge 1 ]; then
		echo "$MYNAME: $*" 1>&2
	fi
}

# func:emsg ver:2023.12.31
# error message to stderr
# emsg "messages"
emsg()
{
        echo "$MYNAME: ${ESCERR}$*${ESCBACK}" 1>&2
}

# func:okmsg ver:2024.01.01
# ok message to stdout
# okmsg "messages"
okmsg()
{
        echo "$MYNAME: ${ESCOK}$*${ESCBACK}"
}

# func:msg ver:2023.12.23
# message to stdout
# msg "messages"
msg()
{
	echo "$MYNAME: $*"
}

###
TOPDIR=stable-diffusion.cpp

BUILDPATH="$TOPDIR/build"

MODELSPATH1="$TOPDIR/models"
MODELSPATH2="$BUILDPATH/models"
MODELS=""

DATEFOLDERS=""


# flags
EXMODEL=$RET_FALSE
EXDATE=$RET_FALSE
ADDFOLDER=$RET_FALSE
ADDFOLDEROPT=""


###
# set MODELS
do_checkmodels()
{
	msg "# checkmodels"
	# ex. ggml/build/models/whisper/ggml-small.bin
	if [ -d $MODELSPATH1 ]; then
		msg "find -L $MODELSPATH1"
		find -L $MODELSPATH1
		MODELS1=`find -L $MODELSPATH1 -type f | awk '{ printf(" %s",$0); }'`
		okmsg "MODELS1: $MODELS1"
	fi
	if [ -d $MODELSPATH2 ]; then
		msg "find -L $MODELSPATH2"
		find -L $MODELSPATH2
		MODELS2=`find -L $MODELSPATH2 -type f | awk '{ printf(" %s",$0); }'`
		okmsg "MODELS2: $MODELS2"
	fi

	MODELS="$MODELS1 $MODELS2"
}

do_checkdatefolders()
{
	msg "# checkdatefolders"
	# ex. ggml/build/0226up
	if [ -d $BUILDPATH ]; then
		msg "find -L $BUILDPATH"
		#find -L $BUILDPATH
		DATEFOLDERS=`find -L $BUILDPATH -type d | \
		awk '/build.[0-9]{6}[[:print:]]*/ { print $0 }'`
		okmsg "DATEFOLDERS: $DATEFOLDERS"
	fi
}

usage()
{
	#echo "usage: $MYNAME [-h][-v][-n][-nd][-ncp][-xm][-xd][-a folders,...] zip-filename"
	echo "usage: $MYNAME [-h][-v][-n][-nd][-xm][-xd][-a folders,...] zip-filename"
	echo "options: (default)"
	echo "  -h|--help ... this message"
	echo "  -v|--verbose ... increase verbose message level"
	echo "  -n|--noexec ... no execution, test mode (FALSE)"
	echo "  -nd|--nodie ... no die (FALSE)"
	#echo "  -ncp|--nocopy ... no copy (FALSE)"
	echo "  -xm ... exclude models in $MODELSPATH1,$MODELSPATH2"
	echo "  -xd ... exclude date folders in build folder, except for below id"
	echo "  -a 230218,230226up ... add specified folders in build folder"
	echo "  chkmodels ... check models"
	echo "  chkdate ... check date folders"
	echo "  zip-filename ... zip filename ex. sdcpp-230218.zip"
}


###
# options
if [ $# = 0 ]; then
	usage
	exit $ERR_USAGE
fi

# save options
ALLOPT="$*"
OPTLOOP=$RET_TRUE
while [ $OPTLOOP -eq $RET_TRUE ];
do
	case $1 in
	-h|--help)	usage; exit $ERR_USAGE;;
	-v|--verbose)   VERBOSE=`expr $VERBOSE + 1`;;
	-n|--noexec)    NOEXEC=$RET_TRUE;;
	-nd|--nodie)	NODIE=$RET_TRUE;;
	-ncp|--nocopy)	NOCOPY=$RET_TRUE;;
	-xm)		EXMODEL=$RET_TRUE;;
	-xd)		EXDATE=$RET_TRUE;;
	-a)		ADDFOLDER=$RET_TRUE; shift; ADDFOLDEROPT=$1;;
	-*)		emsg "# ignore unknown option: $1";;
	*)		OPTLOOP=$RET_FALSE; break;;
	esac
	shift
done

# check
if [ ! -d $TOPDIR ]; then
	die $ERR_NOTEXISTED "no $TOPDIR, exit"
fi

ZIPFILE="$1"
if [ -e $ZIPFILE ]; then
	die $ERR_EXISTED "already existed: $ZIPFILE, exit"
fi

CMD="$1"
# do ckeck models
if [ x"$CMD" = xchkmodels ]; then
	msg "# do check models"
	do_checkmodels
	exit $RET_OK
fi

# do ckeck date folders
if [ x"$CMD" = xchkdate ]; then
	msg "# do check date folders"
	do_checkdatefolders
	exit $RET_OK
fi

# add folders
ADDOPT=""
if [ $ADDFOLDER -eq $RET_TRUE ]; then
	msg "# add folders: $ADDFOLDEROPT"
	ADDFOLDEROPTS=`echo $ADDFOLDEROPT | sed 's/,/ /g'`
	for i in $ADDFOLDEROPTS
	do
		msg "# add folders: $i"
		if [ -e $BUILDPATH/$i ]; then
			ADDOPT="$ADDOPT $BUILDPATH/$i"
		fi
	done
fi

# delete CMakeFiles
if [ -d $BUILDPATH/CMakeFiles ]; then
	msg "# no rm -rf $BUILDPATH/CMakeFiles"
	#msg "rm -rf $BUILDPATH/CMakeFiles"
	#rm -rf $BUILDPATH/CMakeFiles
fi

# exclude models
XOPT=""
if [ $EXMODEL -eq $RET_TRUE ]; then
	do_checkmodels
	for i in $MODELS
	do
		XOPT="$XOPT -x $i"
	done
	msg "# exclude models"
fi
# exclude date folders
if [ $EXDATE -eq $RET_TRUE ]; then
	do_checkdatefolders
	for i in $DATEFOLDERS
	do
		XOPT="$XOPT -x $i/*"
	done
	msg "# exclude date folders"
fi

# do zip
msg "zip -rvy $ZIPFILE $TOPDIR $XOPT"
zip -rvy $ZIPFILE $TOPDIR $XOPT

if [ $ADDFOLDER = 1 ]; then
	msg "zip -rvy $ZIPFILE $ADDOPT"
	zip -rvy $ZIPFILE $ADDOPT
fi

msg "# finished"

msg "$ $MYNAME $ALLOPT"
msg "ls -l $ZIPFILE"
ls -l $ZIPFILE
# end

